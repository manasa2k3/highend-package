Day 14:
1.Pyramid Program:

def pyramid(n):
    row = n
    col = 2*n-1
    start , end = n-1 , n-1
    for i in range(row):
        for j in range(col):
            if j>=start and j<=end:
                print(" ",end="")
            else:
                print("*",end="")
        print()
        start-=1
        end+=1

def circle(n):
    row = n
    col = n
    for i in range(row):
        for j in range(col):
            if i==j or (i+j) == n-1:
                print(" ",end=" ")
            elif i==0 or i==n-1 or j==0 or j==n-1:
                print("*",end=" ")
            else:
                print(" ",end=" ")
        print()

def upper_trangular(n):
    char = 'a'
    for i in range(1,n+1):
        for j in range(i):
            print(char,end=" ")
            char = chr(ord(char)+1)
            if char > 'z':
                char = 'a'
        print()
def hollow_pyramid(n):
    row = n
    col = 2*n-1
    start , end = n-1 , n-1
    var = 2
    var2 = 1
    for i in range(row):
        for j in range(col):
            if (j==start or j==end) and i!=n-1:
                if start == end:
                    print(1,end=" ")
                elif j==start:
                    print(1,end=" ")
                else:
                    print(var,end=" ")
                    var+=1
            elif i==n-1 and (j>=start and j<=n-1):
                print(var2,end=" ")
                var2+=1
            else:
                print(" ",end="")

        print()
        start-=1
        end+=1
hollow_pyramid(5)

Output:
    1     
   1  2    
  1    3   
 1      4  
1 2 3 4 5    

2.Single Linked List:

class Node:
    def _init_(self,data):
        self.data = data
        self.next = None

class LinkedList:
    def _init_(self):
        self.start = None
        self.temp = None
    def create_list(self):
        for i in range(11):
            new_node = Node(i)
            if self.start is None:
                self.start = new_node
                self.temp = self.start
            else:
                self.temp.next = new_node
                self.temp = self.temp.next
        return self.start
    def print_list(self):
        self.temp = self.start
        while self.temp:
            print(self.temp.data,end=" ")
            self.temp = self.temp.next
        print()
    def reverse_list(self):
        self.temp = self.start
        arr = []
        while self.temp is not None:
            arr.append(self.temp.data)
            self.temp = self.temp.next
        arr = arr[::-1]
        self.temp = self.start
        i = 0
        #print("arr",arr)
        while self.temp is not None:
            self.temp.data = arr[i]
            i+=1
            self.temp = self.temp.next
    # def find_median(self):
    #     self.temp = self.start
    #     print("self.temp-check1",self.temp)
    #     length = self.find_length()
    #     counter = length//2
    #     counter-=1
    #     print("counter",counter)
    #     i = 1
    #     while i!= counter:
    #         print(i,end=" ")
    #         self.temp = self.temp.next
    #         i+=1
    #     print("self.temp-check2",self.temp)
    #     if length % 2 == 1 and self.temp is not None:
    #         return self.temp.next.data
    #     elif self.temp is not None and self.temp.next is not None:
    #         return (self.temp.data + self.temp.next.data) // 2

    def find_length(self):
        self.temp = self.start
        ans = 0
        while self.temp is not None:
            ans+=1
            self.temp = self.temp.next
        return ans
object_ = LinkedList()
start = object_.create_list()
object_.print_list()
object_.reverse_list()
object_.print_list()



        

