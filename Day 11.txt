Day 11:
1.Finding Missing and Repeated numbers?

def find_missing_and_repeated_numbers(nums):
    n = len(nums)
    expected_sum = (n + 1) * (n + 2) // 2  # Sum of first (n+1) natural numbers
    actual_sum = sum(nums)
    total_sum = expected_sum - actual_sum  # This will give the missing number
    num_count = {}
    repeated_numbers = []
    for num in nums:
        if num in num_count:
            num_count[num] += 1
        else:
            num_count[num] = 1
    for num, count in num_count.items():
        if count > 1:
            repeated_numbers.append(num)

    return total_sum, repeated_numbers

# Example usage:
nums = [1, 2, 3, 5, 6, 7, 3]
missing_number, repeated_numbers = find_missing_and_repeated_numbers(nums)
print("The missing number is:", missing_number)
print("Repeated numbers are:", repeated_numbers)

Output:
The missing number is: 9
Repeated numbers are: [3]

2.Prefix sum.....

original_list = [3, 12, 10, 18, 25, 31, 36]
prefix_sum = [0] * len(original_list)  # Create an empty list of the same length as the original list
prefix_sum[0] = original_list[0]
for i in range(1, len(original_list)):
    prefix_sum[i] = prefix_sum[i - 1] + original_list[i]

# Print the prefix sum
print("Prefix Sum:", prefix_sum)

Output:
Prefix Sum: [3, 15, 25, 43, 68, 99, 135]

3.Max sum Subarray.....

def max_sum_subarray(arr, k):
    if k <= 0 or k > len(arr):
        return None  # Invalid input
    max_sum = float('-inf')
    current_sum = sum(arr[:k])  # Initialize the sum of the first k elements
    for i in range(k, len(arr)):
        current_sum += arr[i] - arr[i - k]  # Update the sum by adding the next element and subtracting the first element of the previous subarray
        max_sum = max(max_sum, current_sum)
    return max_sum
# Example usage:
arr = [1,2,3,4]
k = 3
result = max_sum_subarray(arr, k)
print("The maximum sum of a subarray of length", k, "is:", result)

Output:
The maximum sum of a subarray of length 3 is: 9

4.Query subarray sum........

 def query_subarray_sum(arr,queries):
    n=len(arr)
    ps=[0 for i in range(n)]
    for i in range(n):
        if i==0:
            ps[i]=arr[i]
        else:
            ps[i]=ps[i-1]+arr[i]
    for query in queries:
        i=query[0]
        j=query[1]
        if i==0:
            print(ps[j],end=" ")
        else:
            print(ps[j]-ps[i-1],end=" ")
query_subarray_sum([
    2,4,5,1,6,3,7,8
],
     [
         [0,4],[1,3],[4,6]
      ]
 )

Output:18 10 16

5.Pair with sum.......

 def has_pair_with_sum(arr, target_sum):
    seen = {}  
    for num in arr:
        complement = target_sum - num
        if complement in seen:
            return True  
        seen[num] = True  
    return False 
arr = [1, 2, 3, 4, 5]
target_sum = 9
if has_pair_with_sum(arr, target_sum):
    print("There is a pair with the sum", target_sum)
else:
    print("No pair with the sum", target_sum, "exists")

Output:There is a pair with the sum 9

6.Kadnes....

def kadanes(arr):
    _sum=float("-inf")
    cs=arr[0]
    n=len(arr)
    for i in range(1,n):
        if cs<0:
            cs=0
        cs=cs+arr[i]
        if arr[i]<0:
            _sum=max(_sum,cs+arr[i])
            cs = cs+arr[i]
    return max(_sum,cs)
print(kadanes([-1,-1,3,-4,-6,18,65,110]))

Output:193

7.Sliding Window.....

def sliding_window(arr,k):
    _sum = 0
    i, j = 0,k-1
    while j<len(arr):
        if i == 0:
            _sum = sum(arr[i:j+1])
            ps = _sum
        else:
            cs = ps - arr[i-1]+arr[j]
            _sum = max(_sum, cs)
            ps = cs
        i+=1
        j+=1
    return _sum
print(sliding_window(
    [-3,20,3,-9,18,-45,23,67],3
     ))

Output:45             









