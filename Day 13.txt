Day 13:

1.N-Queen Program:

def solve_n_queen(n, board, row, col, diag, rev_diag, asf):
    if row == n:
        print(asf)
        for i in range(n):
            for j in range(n):
                print(board[i][j], end=" ")
            print()
        print()
        return
    for i in range(n):
        if col[i] == 0 and diag[row - i + n - 1] == 0 and rev_diag[row + i] == 0:
            board[row][i] = 1
            col[i] = 1
            diag[row - i + n - 1] = 1
            rev_diag[row + i] = 1
            asf += str(row) + " " + str(i) + " "
            solve_n_queen(n, board, row + 1, col, diag, rev_diag, asf)
            board[row][i] = 0
            col[i] = 0
            diag[row - i + n - 1] = 0
            rev_diag[row + i] = 0
            asf = asf[:-4]

def main():
    n = 4
    board = [[0 for i in range(n)] for j in range(n)]
    col = [0 for i in range(n)]
    diag = [0 for i in range(2 * n - 1)]
    rev_diag = [0 for i in range(2 * n - 1)]
    asf = ' '
    solve_n_queen(n, board, 0, col, diag, rev_diag, asf)

main() 

Output:
 n-queen
 0 1 1 3 2 0 3 2 
0 1 0 0 
0 0 0 1 
1 0 0 0 
0 0 1 0 

 0 2 1 0 2 3 3 1 
0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 

2.Linked List:A linked list is the most sought-after data structure when it comes to handling dynamic data elements.

Linked List Program:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

if __name__ == "__main__":
    linked_list = LinkedList()
    linked_list.append(1)
    linked_list.append(2)
    linked_list.append(3)
    linked_list.append(4)
    linked_list.append(5)

    print("Linked List:")
    linked_list.display()

Output:
Linked List:
1 -> 2 -> 3 -> 4 -> 5 -> None

3.Recursion:

from time import *

def fun(n):
    if n<=2: return n
    return fun(n-2)+fun(n-4)
# start_time = perf_counter()
# ans = fun(16)
# sleep(0)
# end_time = perf_counter()
# print((end_time-start_time)*1000," ms")

dp =  [-100 for i in range(17)]
def optimised_fun(n):
    global dp 
    if dp[n] != -100:
        return dp[n]
    if n<=2:
        dp[n] = n
        return n
    ans1 = fun(n-2)
    ans2 = fun(n-4)
    dp[n-2] = ans1
    dp[n-4] = ans2
    return ans1+ans2
print(optimised_fun(16))

Output:42

4.Test Array:

n = 3
dp = [[0]*n]*n
#print(dp)

dp[0][1] = 5
#print(dp)


dp2 = [[0 for i in range(n)] for j in range(n)]
print(dp2)
dp2[0][1] = 5
print(dp2)

Output:
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
[[0, 5, 0], [0, 0, 0], [0, 0, 0]]

5.Unique Poaition:

def main():
    _str = "bfbfbfbbfbbfbfbfb"
    visited = [0 for i in range(1000)]
    cp = 0
    visited[cp]=1
    ans = 1
    for ch in _str:
        if ch == 'b':
            if cp-1>=0:
                cp-=1
        else:
            cp+=2
        if visited[cp]!=1:
            ans+=1
            visited[cp]=1
    return ans

print(main())

Output:7

6.All Per Permutation Program:

def permute(arr):
    if len(arr) == 1:
        return [arr]
    ans = []
    for i in range(len(arr)):
        temp_ans = [arr[i]]
        sub_arr = arr[0:i]+arr[i+1 :]
        p_arr = permute(sub_arr)
        for e in p_arr:
            ans.append(temp_ans+e)
    return ans

print(permute([1,2,3]))

Output:
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

7.Find Nmber of Ways(5):

def find_number_of_ways(n):
    if n==1:
        return 1
    if n<=0:
        return 0
    return find_number_of_ways(n-1)+find_number_of_ways(n-2)+find_number_of_ways(n-3)










